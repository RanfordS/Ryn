(* Indices | Rel     | Depth | Size
 *    0    |    0    | 0     | 1
 *  1   2  |  0   1  | 1     | 3
 * 3 4 5 6 | 0 1 2 3 | 2     | 7
 *
 * Example
 *    1
 *  2   5
 * 3 4 6 7
 *)

BinaryHeap :: Struct A
{
    data [size #used U64]A
}

providing BinaryHeap bubble_up bubble_down insert pop;

layer_of_index :: Func index U64 -> U64
{
    layer := 0u64;
    capacity := 1u64;
    while capacity <= index
    {
        ++layer;
        capacity = 2*capacity + 1;
    }
    return layer;
}

bubble_up :: Func %heap $BinaryHeap A index U64 value A
{
    using heap;
    while true
    {
        parent = (index - 1)/2;
        if parent == U64 -1
        {   break }

        if value < data[parent]
        {
            data[index] = data[parent];
            index = parent;
        }
        else break;
    }

    data[index] = value;
}

bubble_down :: Func %heap $BinaryHeap A index U64 value A
{
    while true
    {
        child = 2*index + 1;
        if used <= child
        {   break }

        (* if we have more than one child, we must choose the lesser one *)
        if used != child + 1
        {
            if data[child + 1] < data[child]
            {   ++child }
        }

        if data[child] < value
        {
            data[index] = data[child];
            index = child;
        }
        else
        {   break }
    }

    data[index] = value;
}

insert :: Func %heap $BinaryHeap A value A
{
    index = heap.used++;
    bubble_up heap index value;
}

pop :: Func %heap $BinaryHeap A -> A
{
    using heap;
    result := data[0];
    tail_index := --used;
    bubble_down heap 0 data[tail_index];
    return result;
}

